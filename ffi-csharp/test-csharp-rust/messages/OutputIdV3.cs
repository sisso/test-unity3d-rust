// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace messages
{

using global::System;
using global::FlatBuffers;

public struct OutputIdV3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static OutputIdV3 GetRootAsOutputIdV3(ByteBuffer _bb) { return GetRootAsOutputIdV3(_bb, new OutputIdV3()); }
  public static OutputIdV3 GetRootAsOutputIdV3(ByteBuffer _bb, OutputIdV3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OutputIdV3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public messages.OutputKind Kind { get { int o = __p.__offset(4); return o != 0 ? (messages.OutputKind)__p.bb.GetShort(o + __p.bb_pos) : messages.OutputKind.Started; } }
  public uint Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public messages.V3? V3 { get { int o = __p.__offset(8); return o != 0 ? (messages.V3?)(new messages.V3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartOutputIdV3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKind(FlatBufferBuilder builder, messages.OutputKind kind) { builder.AddShort(0, (short)kind, 0); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(1, id, 0); }
  public static void AddV3(FlatBufferBuilder builder, Offset<messages.V3> v3Offset) { builder.AddStruct(2, v3Offset.Value, 0); }
  public static Offset<messages.OutputIdV3> EndOutputIdV3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<messages.OutputIdV3>(o);
  }
};


}
