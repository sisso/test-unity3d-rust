// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace messages
{

using global::System;
using global::FlatBuffers;

public struct Outputs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Outputs GetRootAsOutputs(ByteBuffer _bb) { return GetRootAsOutputs(_bb, new Outputs()); }
  public static Outputs GetRootAsOutputs(ByteBuffer _bb, Outputs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Outputs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public messages.OutputEmpty? OutputsEmpty(int j) { int o = __p.__offset(4); return o != 0 ? (messages.OutputEmpty?)(new messages.OutputEmpty()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutputsEmptyLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public messages.OutputId? OutputsId(int j) { int o = __p.__offset(6); return o != 0 ? (messages.OutputId?)(new messages.OutputId()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutputsIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public messages.OutputIdV3? OutputsIdv3(int j) { int o = __p.__offset(8); return o != 0 ? (messages.OutputIdV3?)(new messages.OutputIdV3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutputsIdv3Length { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<messages.Outputs> CreateOutputs(FlatBufferBuilder builder,
      VectorOffset outputs_emptyOffset = default(VectorOffset),
      VectorOffset outputs_idOffset = default(VectorOffset),
      VectorOffset outputs_idv3Offset = default(VectorOffset)) {
    builder.StartTable(3);
    Outputs.AddOutputsIdv3(builder, outputs_idv3Offset);
    Outputs.AddOutputsId(builder, outputs_idOffset);
    Outputs.AddOutputsEmpty(builder, outputs_emptyOffset);
    return Outputs.EndOutputs(builder);
  }

  public static void StartOutputs(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddOutputsEmpty(FlatBufferBuilder builder, VectorOffset outputsEmptyOffset) { builder.AddOffset(0, outputsEmptyOffset.Value, 0); }
  public static VectorOffset CreateOutputsEmptyVector(FlatBufferBuilder builder, Offset<messages.OutputEmpty>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputsEmptyVectorBlock(FlatBufferBuilder builder, Offset<messages.OutputEmpty>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsEmptyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputsId(FlatBufferBuilder builder, VectorOffset outputsIdOffset) { builder.AddOffset(1, outputsIdOffset.Value, 0); }
  public static VectorOffset CreateOutputsIdVector(FlatBufferBuilder builder, Offset<messages.OutputId>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputsIdVectorBlock(FlatBufferBuilder builder, Offset<messages.OutputId>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputsIdv3(FlatBufferBuilder builder, VectorOffset outputsIdv3Offset) { builder.AddOffset(2, outputsIdv3Offset.Value, 0); }
  public static VectorOffset CreateOutputsIdv3Vector(FlatBufferBuilder builder, Offset<messages.OutputIdV3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputsIdv3VectorBlock(FlatBufferBuilder builder, Offset<messages.OutputIdV3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsIdv3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<messages.Outputs> EndOutputs(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<messages.Outputs>(o);
  }
};


}
