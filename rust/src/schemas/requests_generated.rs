// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod requests {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u16)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum RequestKind {
  SetInputAxis = 0,

}

const ENUM_MIN_REQUEST_KIND: u16 = 0;
const ENUM_MAX_REQUEST_KIND: u16 = 0;

impl<'a> flatbuffers::Follow<'a> for RequestKind {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for RequestKind {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u16::to_le(self as u16);
    let p = &n as *const u16 as *const RequestKind;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u16::from_le(self as u16);
    let p = &n as *const u16 as *const RequestKind;
    unsafe { *p }
  }
}

impl flatbuffers::Push for RequestKind {
    type Output = RequestKind;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<RequestKind>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_REQUEST_KIND:[RequestKind; 1] = [
  RequestKind::SetInputAxis
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_REQUEST_KIND:[&'static str; 1] = [
    "SetInputAxis"
];

pub fn enum_name_request_kind(e: RequestKind) -> &'static str {
  let index = e as u16;
  ENUM_NAMES_REQUEST_KIND[index as usize]
}

// struct EmptyPackage, aligned to 2
#[repr(C, align(2))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct EmptyPackage {
  kind_: RequestKind,
} // pub struct EmptyPackage
impl flatbuffers::SafeSliceAccess for EmptyPackage {}
impl<'a> flatbuffers::Follow<'a> for EmptyPackage {
  type Inner = &'a EmptyPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a EmptyPackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a EmptyPackage {
  type Inner = &'a EmptyPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<EmptyPackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for EmptyPackage {
    type Output = EmptyPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const EmptyPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b EmptyPackage {
    type Output = EmptyPackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const EmptyPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl EmptyPackage {
  pub fn new<'a>(_kind: RequestKind) -> Self {
    EmptyPackage {
      kind_: _kind.to_little_endian(),

    }
  }
  pub fn kind<'a>(&'a self) -> RequestKind {
    self.kind_.from_little_endian()
  }
}

// struct V2Package, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct V2Package {
  x_: f32,
  y_: f32,
} // pub struct V2Package
impl flatbuffers::SafeSliceAccess for V2Package {}
impl<'a> flatbuffers::Follow<'a> for V2Package {
  type Inner = &'a V2Package;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a V2Package>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a V2Package {
  type Inner = &'a V2Package;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<V2Package>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for V2Package {
    type Output = V2Package;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const V2Package as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b V2Package {
    type Output = V2Package;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const V2Package as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl V2Package {
  pub fn new<'a>(_x: f32, _y: f32) -> Self {
    V2Package {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

pub enum StringPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct StringPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StringPackage<'a> {
    type Inner = StringPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> StringPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        StringPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StringPackageArgs<'args>) -> flatbuffers::WIPOffset<StringPackage<'bldr>> {
      let mut builder = StringPackageBuilder::new(_fbb);
      if let Some(x) = args.buffer { builder.add_buffer(x); }
      builder.finish()
    }

    pub const VT_BUFFER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buffer(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StringPackage::VT_BUFFER, None)
  }
}

pub struct StringPackageArgs<'a> {
    pub buffer: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for StringPackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        StringPackageArgs {
            buffer: None,
        }
    }
}
pub struct StringPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StringPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_buffer(&mut self, buffer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringPackage::VT_BUFFER, buffer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StringPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StringPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StringPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum RequestsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Requests<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Requests<'a> {
    type Inner = Requests<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Requests<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Requests {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RequestsArgs<'args>) -> flatbuffers::WIPOffset<Requests<'bldr>> {
      let mut builder = RequestsBuilder::new(_fbb);
      if let Some(x) = args.axis { builder.add_axis(x); }
      builder.finish()
    }

    pub const VT_AXIS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn axis(&self) -> Option<&'a V2Package> {
    self._tab.get::<V2Package>(Requests::VT_AXIS, None)
  }
}

pub struct RequestsArgs<'a> {
    pub axis: Option<&'a  V2Package>,
}
impl<'a> Default for RequestsArgs<'a> {
    #[inline]
    fn default() -> Self {
        RequestsArgs {
            axis: None,
        }
    }
}
pub struct RequestsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RequestsBuilder<'a, 'b> {
  #[inline]
  pub fn add_axis(&mut self, axis: &'b  V2Package) {
    self.fbb_.push_slot_always::<&V2Package>(Requests::VT_AXIS, axis);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RequestsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RequestsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Requests<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod requests

