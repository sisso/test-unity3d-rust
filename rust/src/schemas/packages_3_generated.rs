// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u16)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum MessageKind {
  StartGame = 0,
  CreateObj = 1,
  MoveObj = 2,
  SetInputAxis = 3,

}

const ENUM_MIN_MESSAGE_KIND: u16 = 0;
const ENUM_MAX_MESSAGE_KIND: u16 = 3;

impl<'a> flatbuffers::Follow<'a> for MessageKind {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for MessageKind {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u16::to_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u16::from_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
}

impl flatbuffers::Push for MessageKind {
    type Output = MessageKind;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<MessageKind>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_MESSAGE_KIND:[MessageKind; 4] = [
  MessageKind::StartGame,
  MessageKind::CreateObj,
  MessageKind::MoveObj,
  MessageKind::SetInputAxis
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_MESSAGE_KIND:[&'static str; 4] = [
    "StartGame",
    "CreateObj",
    "MoveObj",
    "SetInputAxis"
];

pub fn enum_name_message_kind(e: MessageKind) -> &'static str {
  let index = e as u16;
  ENUM_NAMES_MESSAGE_KIND[index as usize]
}

// struct IdPackage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct IdPackage {
  id_: u32,
} // pub struct IdPackage
impl flatbuffers::SafeSliceAccess for IdPackage {}
impl<'a> flatbuffers::Follow<'a> for IdPackage {
  type Inner = &'a IdPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a IdPackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a IdPackage {
  type Inner = &'a IdPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<IdPackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for IdPackage {
    type Output = IdPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const IdPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b IdPackage {
    type Output = IdPackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const IdPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl IdPackage {
  pub fn new<'a>(_id: u32) -> Self {
    IdPackage {
      id_: _id.to_little_endian(),

    }
  }
  pub fn id<'a>(&'a self) -> u32 {
    self.id_.from_little_endian()
  }
}

// struct CreatePackage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CreatePackage {
  id_: u32,
  x_: f32,
  y_: f32,
} // pub struct CreatePackage
impl flatbuffers::SafeSliceAccess for CreatePackage {}
impl<'a> flatbuffers::Follow<'a> for CreatePackage {
  type Inner = &'a CreatePackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a CreatePackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a CreatePackage {
  type Inner = &'a CreatePackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<CreatePackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for CreatePackage {
    type Output = CreatePackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const CreatePackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b CreatePackage {
    type Output = CreatePackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const CreatePackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl CreatePackage {
  pub fn new<'a>(_id: u32, _x: f32, _y: f32) -> Self {
    CreatePackage {
      id_: _id.to_little_endian(),
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn id<'a>(&'a self) -> u32 {
    self.id_.from_little_endian()
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

// struct PosPackage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct PosPackage {
  id_: u32,
  x_: f32,
  y_: f32,
} // pub struct PosPackage
impl flatbuffers::SafeSliceAccess for PosPackage {}
impl<'a> flatbuffers::Follow<'a> for PosPackage {
  type Inner = &'a PosPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PosPackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PosPackage {
  type Inner = &'a PosPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PosPackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PosPackage {
    type Output = PosPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const PosPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b PosPackage {
    type Output = PosPackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const PosPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl PosPackage {
  pub fn new<'a>(_id: u32, _x: f32, _y: f32) -> Self {
    PosPackage {
      id_: _id.to_little_endian(),
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn id<'a>(&'a self) -> u32 {
    self.id_.from_little_endian()
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

// struct V2Package, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct V2Package {
  x_: f32,
  y_: f32,
} // pub struct V2Package
impl flatbuffers::SafeSliceAccess for V2Package {}
impl<'a> flatbuffers::Follow<'a> for V2Package {
  type Inner = &'a V2Package;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a V2Package>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a V2Package {
  type Inner = &'a V2Package;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<V2Package>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for V2Package {
    type Output = V2Package;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const V2Package as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b V2Package {
    type Output = V2Package;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const V2Package as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl V2Package {
  pub fn new<'a>(_x: f32, _y: f32) -> Self {
    V2Package {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

pub enum StringPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct StringPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StringPackage<'a> {
    type Inner = StringPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> StringPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        StringPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StringPackageArgs<'args>) -> flatbuffers::WIPOffset<StringPackage<'bldr>> {
      let mut builder = StringPackageBuilder::new(_fbb);
      if let Some(x) = args.buffer { builder.add_buffer(x); }
      builder.finish()
    }

    pub const VT_BUFFER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buffer(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StringPackage::VT_BUFFER, None)
  }
}

pub struct StringPackageArgs<'a> {
    pub buffer: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for StringPackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        StringPackageArgs {
            buffer: None,
        }
    }
}
pub struct StringPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StringPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_buffer(&mut self, buffer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringPackage::VT_BUFFER, buffer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StringPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StringPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StringPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum BytesPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct BytesPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BytesPackage<'a> {
    type Inner = BytesPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> BytesPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BytesPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BytesPackageArgs<'args>) -> flatbuffers::WIPOffset<BytesPackage<'bldr>> {
      let mut builder = BytesPackageBuilder::new(_fbb);
      if let Some(x) = args.buffer { builder.add_buffer(x); }
      builder.finish()
    }

    pub const VT_BUFFER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buffer(&self) -> Option<&'a [i8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(BytesPackage::VT_BUFFER, None).map(|v| v.safe_slice())
  }
}

pub struct BytesPackageArgs<'a> {
    pub buffer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  i8>>>,
}
impl<'a> Default for BytesPackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        BytesPackageArgs {
            buffer: None,
        }
    }
}
pub struct BytesPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BytesPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_buffer(&mut self, buffer: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BytesPackage::VT_BUFFER, buffer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BytesPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BytesPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BytesPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum OutputOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Output<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Output<'a> {
    type Inner = Output<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Output<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Output {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args OutputArgs<'args>) -> flatbuffers::WIPOffset<Output<'bldr>> {
      let mut builder = OutputBuilder::new(_fbb);
      if let Some(x) = args.move_obj { builder.add_move_obj(x); }
      if let Some(x) = args.create_object { builder.add_create_object(x); }
      if let Some(x) = args.start_game { builder.add_start_game(x); }
      builder.finish()
    }

    pub const VT_START_GAME: flatbuffers::VOffsetT = 4;
    pub const VT_CREATE_OBJECT: flatbuffers::VOffsetT = 6;
    pub const VT_MOVE_OBJ: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn start_game(&self) -> Option<&'a IdPackage> {
    self._tab.get::<IdPackage>(Output::VT_START_GAME, None)
  }
  #[inline]
  pub fn create_object(&self) -> Option<&'a [CreatePackage]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<CreatePackage>>>(Output::VT_CREATE_OBJECT, None).map(|v| v.safe_slice() )
  }
  #[inline]
  pub fn move_obj(&self) -> Option<&'a [PosPackage]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<PosPackage>>>(Output::VT_MOVE_OBJ, None).map(|v| v.safe_slice() )
  }
}

pub struct OutputArgs<'a> {
    pub start_game: Option<&'a  IdPackage>,
    pub create_object: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , CreatePackage>>>,
    pub move_obj: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , PosPackage>>>,
}
impl<'a> Default for OutputArgs<'a> {
    #[inline]
    fn default() -> Self {
        OutputArgs {
            start_game: None,
            create_object: None,
            move_obj: None,
        }
    }
}
pub struct OutputBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OutputBuilder<'a, 'b> {
  #[inline]
  pub fn add_start_game(&mut self, start_game: &'b  IdPackage) {
    self.fbb_.push_slot_always::<&IdPackage>(Output::VT_START_GAME, start_game);
  }
  #[inline]
  pub fn add_create_object(&mut self, create_object: flatbuffers::WIPOffset<flatbuffers::Vector<'b , CreatePackage>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Output::VT_CREATE_OBJECT, create_object);
  }
  #[inline]
  pub fn add_move_obj(&mut self, move_obj: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PosPackage>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Output::VT_MOVE_OBJ, move_obj);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OutputBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OutputBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Output<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum InputOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Input<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Input<'a> {
    type Inner = Input<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Input<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Input {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args InputArgs<'args>) -> flatbuffers::WIPOffset<Input<'bldr>> {
      let mut builder = InputBuilder::new(_fbb);
      if let Some(x) = args.axis { builder.add_axis(x); }
      builder.finish()
    }

    pub const VT_AXIS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn axis(&self) -> Option<&'a V2Package> {
    self._tab.get::<V2Package>(Input::VT_AXIS, None)
  }
}

pub struct InputArgs<'a> {
    pub axis: Option<&'a  V2Package>,
}
impl<'a> Default for InputArgs<'a> {
    #[inline]
    fn default() -> Self {
        InputArgs {
            axis: None,
        }
    }
}
pub struct InputBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InputBuilder<'a, 'b> {
  #[inline]
  pub fn add_axis(&mut self, axis: &'b  V2Package) {
    self.fbb_.push_slot_always::<&V2Package>(Input::VT_AXIS, axis);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InputBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InputBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Input<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

