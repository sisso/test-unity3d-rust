// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u16)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum MessageKind {
  StartGame = 0,
  CreateObj = 1,
  MoveObj = 2,
  SetInputAxis = 3,

}

const ENUM_MIN_MESSAGE_KIND: u16 = 0;
const ENUM_MAX_MESSAGE_KIND: u16 = 3;

impl<'a> flatbuffers::Follow<'a> for MessageKind {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for MessageKind {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u16::to_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u16::from_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
}

impl flatbuffers::Push for MessageKind {
    type Output = MessageKind;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<MessageKind>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_MESSAGE_KIND:[MessageKind; 4] = [
  MessageKind::StartGame,
  MessageKind::CreateObj,
  MessageKind::MoveObj,
  MessageKind::SetInputAxis
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_MESSAGE_KIND:[&'static str; 4] = [
    "StartGame",
    "CreateObj",
    "MoveObj",
    "SetInputAxis"
];

pub fn enum_name_message_kind(e: MessageKind) -> &'static str {
  let index = e as u16;
  ENUM_NAMES_MESSAGE_KIND[index as usize]
}

// struct IdPackage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct IdPackage {
  id_: u32,
} // pub struct IdPackage
impl flatbuffers::SafeSliceAccess for IdPackage {}
impl<'a> flatbuffers::Follow<'a> for IdPackage {
  type Inner = &'a IdPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a IdPackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a IdPackage {
  type Inner = &'a IdPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<IdPackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for IdPackage {
    type Output = IdPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const IdPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b IdPackage {
    type Output = IdPackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const IdPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl IdPackage {
  pub fn new<'a>(_id: u32) -> Self {
    IdPackage {
      id_: _id.to_little_endian(),

    }
  }
  pub fn id<'a>(&'a self) -> u32 {
    self.id_.from_little_endian()
  }
}

// struct PosPackage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct PosPackage {
  x_: f32,
  y_: f32,
} // pub struct PosPackage
impl flatbuffers::SafeSliceAccess for PosPackage {}
impl<'a> flatbuffers::Follow<'a> for PosPackage {
  type Inner = &'a PosPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PosPackage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PosPackage {
  type Inner = &'a PosPackage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PosPackage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PosPackage {
    type Output = PosPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const PosPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b PosPackage {
    type Output = PosPackage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const PosPackage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl PosPackage {
  pub fn new<'a>(_x: f32, _y: f32) -> Self {
    PosPackage {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

pub enum StringPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct StringPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StringPackage<'a> {
    type Inner = StringPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> StringPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        StringPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StringPackageArgs<'args>) -> flatbuffers::WIPOffset<StringPackage<'bldr>> {
      let mut builder = StringPackageBuilder::new(_fbb);
      if let Some(x) = args.buffer { builder.add_buffer(x); }
      builder.finish()
    }

    pub const VT_BUFFER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buffer(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StringPackage::VT_BUFFER, None)
  }
}

pub struct StringPackageArgs<'a> {
    pub buffer: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for StringPackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        StringPackageArgs {
            buffer: None,
        }
    }
}
pub struct StringPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StringPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_buffer(&mut self, buffer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringPackage::VT_BUFFER, buffer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StringPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StringPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StringPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum BytesPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct BytesPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BytesPackage<'a> {
    type Inner = BytesPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> BytesPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BytesPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BytesPackageArgs<'args>) -> flatbuffers::WIPOffset<BytesPackage<'bldr>> {
      let mut builder = BytesPackageBuilder::new(_fbb);
      if let Some(x) = args.buffer { builder.add_buffer(x); }
      builder.finish()
    }

    pub const VT_BUFFER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buffer(&self) -> Option<&'a [i8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(BytesPackage::VT_BUFFER, None).map(|v| v.safe_slice())
  }
}

pub struct BytesPackageArgs<'a> {
    pub buffer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  i8>>>,
}
impl<'a> Default for BytesPackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        BytesPackageArgs {
            buffer: None,
        }
    }
}
pub struct BytesPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BytesPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_buffer(&mut self, buffer: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BytesPackage::VT_BUFFER, buffer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BytesPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BytesPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BytesPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Package<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Package<'a> {
    type Inner = Package<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Package<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Package {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PackageArgs<'args>) -> flatbuffers::WIPOffset<Package<'bldr>> {
      let mut builder = PackageBuilder::new(_fbb);
      if let Some(x) = args.bytes { builder.add_bytes(x); }
      if let Some(x) = args.str { builder.add_str(x); }
      if let Some(x) = args.pos { builder.add_pos(x); }
      if let Some(x) = args.id { builder.add_id(x); }
      builder.add_kind(args.kind);
      builder.finish()
    }

    pub const VT_KIND: flatbuffers::VOffsetT = 4;
    pub const VT_ID: flatbuffers::VOffsetT = 6;
    pub const VT_POS: flatbuffers::VOffsetT = 8;
    pub const VT_STR: flatbuffers::VOffsetT = 10;
    pub const VT_BYTES: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn kind(&self) -> MessageKind {
    self._tab.get::<MessageKind>(Package::VT_KIND, Some(MessageKind::StartGame)).unwrap()
  }
  #[inline]
  pub fn id(&self) -> Option<&'a IdPackage> {
    self._tab.get::<IdPackage>(Package::VT_ID, None)
  }
  #[inline]
  pub fn pos(&self) -> Option<&'a PosPackage> {
    self._tab.get::<PosPackage>(Package::VT_POS, None)
  }
  #[inline]
  pub fn str(&self) -> Option<StringPackage<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<StringPackage<'a>>>(Package::VT_STR, None)
  }
  #[inline]
  pub fn bytes(&self) -> Option<BytesPackage<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<BytesPackage<'a>>>(Package::VT_BYTES, None)
  }
}

pub struct PackageArgs<'a> {
    pub kind: MessageKind,
    pub id: Option<&'a  IdPackage>,
    pub pos: Option<&'a  PosPackage>,
    pub str: Option<flatbuffers::WIPOffset<StringPackage<'a >>>,
    pub bytes: Option<flatbuffers::WIPOffset<BytesPackage<'a >>>,
}
impl<'a> Default for PackageArgs<'a> {
    #[inline]
    fn default() -> Self {
        PackageArgs {
            kind: MessageKind::StartGame,
            id: None,
            pos: None,
            str: None,
            bytes: None,
        }
    }
}
pub struct PackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_kind(&mut self, kind: MessageKind) {
    self.fbb_.push_slot::<MessageKind>(Package::VT_KIND, kind, MessageKind::StartGame);
  }
  #[inline]
  pub fn add_id(&mut self, id: &'b  IdPackage) {
    self.fbb_.push_slot_always::<&IdPackage>(Package::VT_ID, id);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &'b  PosPackage) {
    self.fbb_.push_slot_always::<&PosPackage>(Package::VT_POS, pos);
  }
  #[inline]
  pub fn add_str(&mut self, str: flatbuffers::WIPOffset<StringPackage<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<StringPackage>>(Package::VT_STR, str);
  }
  #[inline]
  pub fn add_bytes(&mut self, bytes: flatbuffers::WIPOffset<BytesPackage<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<BytesPackage>>(Package::VT_BYTES, bytes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Package<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_package<'a>(buf: &'a [u8]) -> Package<'a> {
  flatbuffers::get_root::<Package<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_package<'a>(buf: &'a [u8]) -> Package<'a> {
  flatbuffers::get_size_prefixed_root::<Package<'a>>(buf)
}

#[inline]
pub fn finish_package_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Package<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_package_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Package<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
