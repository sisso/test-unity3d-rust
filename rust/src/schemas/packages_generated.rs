// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum PackageKind {
  Empty = 0,
  Simple = 1,

}

const ENUM_MIN_PACKAGE_KIND: i8 = 0;
const ENUM_MAX_PACKAGE_KIND: i8 = 1;

impl<'a> flatbuffers::Follow<'a> for PackageKind {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for PackageKind {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const PackageKind;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const PackageKind;
    unsafe { *p }
  }
}

impl flatbuffers::Push for PackageKind {
    type Output = PackageKind;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<PackageKind>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_PACKAGE_KIND:[PackageKind; 2] = [
  PackageKind::Empty,
  PackageKind::Simple
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_PACKAGE_KIND:[&'static str; 2] = [
    "Empty",
    "Simple"
];

pub fn enum_name_package_kind(e: PackageKind) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_PACKAGE_KIND[index as usize]
}

#[allow(non_camel_case_types)]
#[repr(u16)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum MessageKind {
  StartGame = 0,
  CreateObj = 1,
  MoveObj = 2,
  SetInputAxis = 3,

}

const ENUM_MIN_MESSAGE_KIND: u16 = 0;
const ENUM_MAX_MESSAGE_KIND: u16 = 3;

impl<'a> flatbuffers::Follow<'a> for MessageKind {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for MessageKind {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u16::to_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u16::from_le(self as u16);
    let p = &n as *const u16 as *const MessageKind;
    unsafe { *p }
  }
}

impl flatbuffers::Push for MessageKind {
    type Output = MessageKind;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<MessageKind>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_MESSAGE_KIND:[MessageKind; 4] = [
  MessageKind::StartGame,
  MessageKind::CreateObj,
  MessageKind::MoveObj,
  MessageKind::SetInputAxis
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_MESSAGE_KIND:[&'static str; 4] = [
    "StartGame",
    "CreateObj",
    "MoveObj",
    "SetInputAxis"
];

pub fn enum_name_message_kind(e: MessageKind) -> &'static str {
  let index = e as u16;
  ENUM_NAMES_MESSAGE_KIND[index as usize]
}

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum GenericPackage {
  NONE = 0,
  EmptyPackage = 1,
  SimplePackage = 2,

}

const ENUM_MIN_GENERIC_PACKAGE: u8 = 0;
const ENUM_MAX_GENERIC_PACKAGE: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for GenericPackage {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for GenericPackage {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const GenericPackage;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const GenericPackage;
    unsafe { *p }
  }
}

impl flatbuffers::Push for GenericPackage {
    type Output = GenericPackage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<GenericPackage>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_GENERIC_PACKAGE:[GenericPackage; 3] = [
  GenericPackage::NONE,
  GenericPackage::EmptyPackage,
  GenericPackage::SimplePackage
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_GENERIC_PACKAGE:[&'static str; 3] = [
    "NONE",
    "EmptyPackage",
    "SimplePackage"
];

pub fn enum_name_generic_package(e: GenericPackage) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_GENERIC_PACKAGE[index as usize]
}

pub struct GenericPackageUnionTableOffset {}
pub enum EmptyPackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct EmptyPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EmptyPackage<'a> {
    type Inner = EmptyPackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> EmptyPackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        EmptyPackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EmptyPackageArgs) -> flatbuffers::WIPOffset<EmptyPackage<'bldr>> {
      let mut builder = EmptyPackageBuilder::new(_fbb);
      builder.add_kind(args.kind);
      builder.finish()
    }

    pub const VT_KIND: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn kind(&self) -> MessageKind {
    self._tab.get::<MessageKind>(EmptyPackage::VT_KIND, Some(MessageKind::StartGame)).unwrap()
  }
}

pub struct EmptyPackageArgs {
    pub kind: MessageKind,
}
impl<'a> Default for EmptyPackageArgs {
    #[inline]
    fn default() -> Self {
        EmptyPackageArgs {
            kind: MessageKind::StartGame,
        }
    }
}
pub struct EmptyPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EmptyPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_kind(&mut self, kind: MessageKind) {
    self.fbb_.push_slot::<MessageKind>(EmptyPackage::VT_KIND, kind, MessageKind::StartGame);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EmptyPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EmptyPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EmptyPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SimplePackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SimplePackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SimplePackage<'a> {
    type Inner = SimplePackage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SimplePackage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SimplePackage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SimplePackageArgs) -> flatbuffers::WIPOffset<SimplePackage<'bldr>> {
      let mut builder = SimplePackageBuilder::new(_fbb);
      builder.add_y(args.y);
      builder.add_x(args.x);
      builder.add_id(args.id);
      builder.add_kind(args.kind);
      builder.finish()
    }

    pub const VT_KIND: flatbuffers::VOffsetT = 4;
    pub const VT_ID: flatbuffers::VOffsetT = 6;
    pub const VT_X: flatbuffers::VOffsetT = 8;
    pub const VT_Y: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn kind(&self) -> MessageKind {
    self._tab.get::<MessageKind>(SimplePackage::VT_KIND, Some(MessageKind::StartGame)).unwrap()
  }
  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(SimplePackage::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn x(&self) -> f32 {
    self._tab.get::<f32>(SimplePackage::VT_X, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn y(&self) -> f32 {
    self._tab.get::<f32>(SimplePackage::VT_Y, Some(0.0)).unwrap()
  }
}

pub struct SimplePackageArgs {
    pub kind: MessageKind,
    pub id: u32,
    pub x: f32,
    pub y: f32,
}
impl<'a> Default for SimplePackageArgs {
    #[inline]
    fn default() -> Self {
        SimplePackageArgs {
            kind: MessageKind::StartGame,
            id: 0,
            x: 0.0,
            y: 0.0,
        }
    }
}
pub struct SimplePackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SimplePackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_kind(&mut self, kind: MessageKind) {
    self.fbb_.push_slot::<MessageKind>(SimplePackage::VT_KIND, kind, MessageKind::StartGame);
  }
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(SimplePackage::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(SimplePackage::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(SimplePackage::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SimplePackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SimplePackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SimplePackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PackageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Package<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Package<'a> {
    type Inner = Package<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Package<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Package {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PackageArgs) -> flatbuffers::WIPOffset<Package<'bldr>> {
      let mut builder = PackageBuilder::new(_fbb);
      if let Some(x) = args.package { builder.add_package(x); }
      builder.add_package_type(args.package_type);
      builder.finish()
    }

    pub const VT_PACKAGE_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_PACKAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn package_type(&self) -> GenericPackage {
    self._tab.get::<GenericPackage>(Package::VT_PACKAGE_TYPE, Some(GenericPackage::NONE)).unwrap()
  }
  #[inline]
  pub fn package(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Package::VT_PACKAGE, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn package_as_empty_package(&self) -> Option<EmptyPackage<'a>> {
    if self.package_type() == GenericPackage::EmptyPackage {
      self.package().map(|u| EmptyPackage::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn package_as_simple_package(&self) -> Option<SimplePackage<'a>> {
    if self.package_type() == GenericPackage::SimplePackage {
      self.package().map(|u| SimplePackage::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct PackageArgs {
    pub package_type: GenericPackage,
    pub package: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PackageArgs {
    #[inline]
    fn default() -> Self {
        PackageArgs {
            package_type: GenericPackage::NONE,
            package: None,
        }
    }
}
pub struct PackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_package_type(&mut self, package_type: GenericPackage) {
    self.fbb_.push_slot::<GenericPackage>(Package::VT_PACKAGE_TYPE, package_type, GenericPackage::NONE);
  }
  #[inline]
  pub fn add_package(&mut self, package: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Package::VT_PACKAGE, package);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Package<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_package<'a>(buf: &'a [u8]) -> Package<'a> {
  flatbuffers::get_root::<Package<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_package<'a>(buf: &'a [u8]) -> Package<'a> {
  flatbuffers::get_size_prefixed_root::<Package<'a>>(buf)
}

#[inline]
pub fn finish_package_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Package<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_package_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Package<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
