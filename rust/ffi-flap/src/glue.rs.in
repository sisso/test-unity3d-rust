foreign_enum!(
    /// Test enum with A and B.
    enum TestEnum {
        A = TestEnum::A,
        B = TestEnum::B,
    }
);

foreign_class!(
    #[derive(Clone)]
    /// Test class containing standard methods.
    class TestClass {
        self_type TestClass;
        /// Documentation for constructor
        constructor TestClass::new() -> TestClass;
        /// increment method documentation
        fn TestClass::increment(&mut self);
        fn TestClass::print(&self);
        fn TestClass::add(&mut self, i: i32);
        fn TestClass::get(&self) -> i32;
        fn TestClass::clone(&self) -> TestClass;
        fn TestClass::eq(&self, other: &TestClass) -> bool;
    }
);

foreign_class!{
    class TemplateI32 {
        self_type Template<i32>;
        private constructor = empty;
    }
}

foreign_class!(
    /// Test class containing static methods only.
    class TestStaticClass {
        /// Documentation for `TestStaticClass::hello`()
        fn TestStaticClass::hello();
        fn TestStaticClass::print_number(n: i32);
        fn TestStaticClass::add(a: i32, b: i32) -> i32;
        fn TestStaticClass::concat(a: String, b: String) -> String;
        fn TestStaticClass::concat_str(a: &str, b: &str) -> String;
        fn TestStaticClass::print_vec_len(vec: Vec<i32>);
        fn TestStaticClass::print_slice_len(mut vec: &[i32]);
        fn TestStaticClass::get_vec() -> Vec<i32>;
        fn TestStaticClass::maybe_return_class(str: Option<String>) -> Option<TestClass>;
        fn TestStaticClass::return_class_ref(obj: &TestClass) -> &TestClass;
        fn TestStaticClass::maybe_add_one(i: Option<i32>) -> Option<i32>;
        fn TestStaticClass::maybe_return_template() -> Option<Template<i32>>;
        fn TestStaticClass::test_obj_by_value(obj: TestClass);

        fn TestStaticClass::try_create_object_template() -> Result<Template<i32>, TestError>;
        fn TestStaticClass::try_empty_result() -> Result<(), TestError>;
        fn TestStaticClass::try_create_object_ok() -> Result<TestClass, TestError>;
        fn TestStaticClass::try_create_object_err() -> Result<TestClass, TestError>;
        fn TestStaticClass::reverse_enum(e: TestEnum) -> TestEnum;
        fn TestStaticClass::get_tuple() -> (i32, String);
    }
);

foreign_class!(
    class TestArc {
        self_type TestArc;
        constructor TestArc::new() -> Arc<TestArc>;
        fn TestArc::to_string(&self) -> String;
        fn TestArc::to_string_arc(_: Arc<TestArc>) -> String;
        fn TestArc::to_string_ref_arc(_: &Arc<TestArc>) -> String;
    }
);

foreign_class!(
    class TestArcMutex {
        self_type TestArcMutex;
        constructor TestArcMutex::new() -> Arc<Mutex<TestArcMutex>>;
        fn TestArcMutex::to_string(&self) -> String;
        fn TestArcMutex::inc(&mut self);
        fn TestArcMutex::to_string_arc(_: Arc<Mutex<TestArcMutex>>) -> String;
    }
);

foreign_class!(
    class TestBox {
        self_type TestBox;
        constructor TestBox::new() -> Box<TestBox>;
        fn TestBox::to_string(&self) -> String;
    }
);



