// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace requests
{

using global::System;
using global::FlatBuffers;

public struct StringPackage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static StringPackage GetRootAsStringPackage(ByteBuffer _bb) { return GetRootAsStringPackage(_bb, new StringPackage()); }
  public static StringPackage GetRootAsStringPackage(ByteBuffer _bb, StringPackage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringPackage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Buffer { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBufferBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBufferBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBufferArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<requests.StringPackage> CreateStringPackage(FlatBufferBuilder builder,
      StringOffset bufferOffset = default(StringOffset)) {
    builder.StartTable(1);
    StringPackage.AddBuffer(builder, bufferOffset);
    return StringPackage.EndStringPackage(builder);
  }

  public static void StartStringPackage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBuffer(FlatBufferBuilder builder, StringOffset bufferOffset) { builder.AddOffset(0, bufferOffset.Value, 0); }
  public static Offset<requests.StringPackage> EndStringPackage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<requests.StringPackage>(o);
  }
};


}
