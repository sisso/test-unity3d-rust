// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FfiResponses
{

using global::System;
using global::FlatBuffers;

public struct BytesPackage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static BytesPackage GetRootAsBytesPackage(ByteBuffer _bb) { return GetRootAsBytesPackage(_bb, new BytesPackage()); }
  public static BytesPackage GetRootAsBytesPackage(ByteBuffer _bb, BytesPackage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BytesPackage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Buffer(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int BufferLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetBufferBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetBufferBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetBufferArray() { return __p.__vector_as_array<sbyte>(4); }

  public static Offset<FfiResponses.BytesPackage> CreateBytesPackage(FlatBufferBuilder builder,
      VectorOffset bufferOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BytesPackage.AddBuffer(builder, bufferOffset);
    return BytesPackage.EndBytesPackage(builder);
  }

  public static void StartBytesPackage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBuffer(FlatBufferBuilder builder, VectorOffset bufferOffset) { builder.AddOffset(0, bufferOffset.Value, 0); }
  public static VectorOffset CreateBufferVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBufferVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartBufferVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<FfiResponses.BytesPackage> EndBytesPackage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FfiResponses.BytesPackage>(o);
  }
};


}
