// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct Package : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Package GetRootAsPackage(ByteBuffer _bb) { return GetRootAsPackage(_bb, new Package()); }
  public static Package GetRootAsPackage(ByteBuffer _bb, Package obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Package __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericPackage PackageType { get { int o = __p.__offset(4); return o != 0 ? (GenericPackage)__p.bb.Get(o + __p.bb_pos) : GenericPackage.NONE; } }
  public TTable? Package<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<Package> CreatePackage(FlatBufferBuilder builder,
      GenericPackage package_type = GenericPackage.NONE,
      int packageOffset = 0) {
    builder.StartTable(2);
    Package.AddPackage(builder, packageOffset);
    Package.AddPackageType(builder, package_type);
    return Package.EndPackage(builder);
  }

  public static void StartPackage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPackageType(FlatBufferBuilder builder, GenericPackage packageType) { builder.AddByte(0, (byte)packageType, 0); }
  public static void AddPackage(FlatBufferBuilder builder, int packageOffset) { builder.AddOffset(1, packageOffset, 0); }
  public static Offset<Package> EndPackage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Package>(o);
  }
  public static void FinishPackageBuffer(FlatBufferBuilder builder, Offset<Package> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPackageBuffer(FlatBufferBuilder builder, Offset<Package> offset) { builder.FinishSizePrefixed(offset.Value); }
};

