// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct Output : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Output GetRootAsOutput(ByteBuffer _bb) { return GetRootAsOutput(_bb, new Output()); }
  public static Output GetRootAsOutput(ByteBuffer _bb, Output obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Output __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public IdPackage? StartGame { get { int o = __p.__offset(4); return o != 0 ? (IdPackage?)(new IdPackage()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public CreatePackage? CreateObject(int j) { int o = __p.__offset(6); return o != 0 ? (CreatePackage?)(new CreatePackage()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int CreateObjectLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PosPackage? MoveObj(int j) { int o = __p.__offset(8); return o != 0 ? (PosPackage?)(new PosPackage()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int MoveObjLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartOutput(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStartGame(FlatBufferBuilder builder, Offset<IdPackage> startGameOffset) { builder.AddStruct(0, startGameOffset.Value, 0); }
  public static void AddCreateObject(FlatBufferBuilder builder, VectorOffset createObjectOffset) { builder.AddOffset(1, createObjectOffset.Value, 0); }
  public static void StartCreateObjectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddMoveObj(FlatBufferBuilder builder, VectorOffset moveObjOffset) { builder.AddOffset(2, moveObjOffset.Value, 0); }
  public static void StartMoveObjVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Output> EndOutput(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Output>(o);
  }
};

